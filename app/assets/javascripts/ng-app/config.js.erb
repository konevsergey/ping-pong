(function() {
  'use strict';

  angular.module('app', [
    'ui.router',
    'LocalStorageModule',
    'ngResource',
    'ncy-angular-breadcrumb',
    'rails',
    'ui-notification',
    'angularSpinner',
    'satellizer',
    'ngAnimate',
    'checklist-model',
    'angular.filter',
    'ui.select', 'ngSanitize'
  ]);

  angular.module('app').config(
    function($locationProvider, $httpProvider, NotificationProvider, $authProvider) {
      $locationProvider.html5Mode(true);

      NotificationProvider.setOptions({
        startTop: 55
      });

      // GitHub
      $authProvider.github({
        url: '/auth/github/callback',
        clientId: <%= "'#{ENV['GITHUB_KEY']}'" %>,
        redirectUri: window.location.origin + '/',
        scope: ['user:name, user:email'],
      });

      // Facebook
      $authProvider.facebook({
        url: '/auth/facebook/callback',
        clientId: <%= "'#{ENV['FACEBOOK_KEY']}'" %>,
        redirectUri: window.location.origin + '/',
        scope: 'email'
      });

      // Vkontakte
      $authProvider.oauth2({
        name: 'vkontakte',
        url: '/auth/vkontakte/callback',
        authorizationEndpoint: 'https://oauth.vk.com/authorize',
        clientId: <%= "'#{ENV['VKONTAKTE_KEY']}'" %>,
        redirectUri: window.location.origin + '/',
        scope: 'email',
        display: 'popup',
        responseType: 'code',
        requiredUrlParams: ['response_type', 'client_id', 'redirect_uri', 'display', 'scope'],
        scopeDelimiter: ',',
      });


      $httpProvider.interceptors.push('ErrorHandlerInterceptor');

    });


  run.$inject = ['$rootScope', 'Notification', '$state', '$auth', 'User', '$document', '$window'];
  function run($rootScope, Notification, $state, $auth, User, $document, $window) {

    $rootScope.setUser = setUser;
    setUser();

    $rootScope.$on('responseError', function(event, responce) {
      // console.log(responce);
      Notification.error(responce.statusText);
    });

    $rootScope.$on('error', function(event, message) {
      Notification.error(message);
    });

    $rootScope.$on('auth_error', function(event, message) {
      // $state.go('login')
      Notification.error(message);
    });

    $rootScope.$on('auth', function(event) {
      setUser();
    });

    $rootScope.$on('logout', function(event, message) {
      $rootScope.currentUser = {}
    });

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){
      $rootScope.checkAccess(event, toState, toParams, fromState, fromParams);
    })

    function setUser(new_user) {
      // TODO: asynchronious doesn't work!!!!
      if (new_user) {
        $rootScope.currentUser = new_user
      } else {
        if ($auth.isAuthenticated()) {
          console.log('isAuthenticated');
          $.ajax('api/users/'+$auth.getPayload()['user_id'], {async: false})
           .success(function (data) {
             $rootScope.currentUser = data;
         });
          // User.get($auth.getPayload()['user_id']).then(function(response){
          //   $rootScope.currentUser = response;
          // })
        } else {
          $rootScope.currentUser = {}
        }
      };
    };

    $rootScope.clearSelectFilter = function($event, $select) {
      //stops click event bubbling
      $event.stopPropagation();
      //to allow empty field, in order to force a selection remove the following line
      $select.selected = undefined;
      //reset search query
      $select.search = undefined;
      //focus and open dropdown
      $select.activate();
    }

    $rootScope.equals = function(obj1, obj2) {
      return angular.equals(obj1, obj2);
    }

    $rootScope.previousState;
    $rootScope.currentState;
    $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
        $rootScope.previousState = from.name;
        $rootScope.currentState = to.name;
    });

    $rootScope.checkAccess = function(event, toState, toParams, fromState, fromParams) {
      if (toState.data !== undefined) {
        if (toState.data.checkAdmin !== undefined && toState.data.checkAdmin) {
          if (!$rootScope.currentUser.admin) {
            event.preventDefault();
          }
        }
      }
    };
  }
  angular.module('app').run(run);
})();
